plugins {
    id 'java'
    id 'distribution'
    id "org.hidetake.ssh" version "1.1.3"
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = 1.8
//noinspection GroovyUnusedAssignment
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile 'commons-cli:commons-cli:1.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'net.openhft:koloboke-api-jdk8:0.6.7'
    runtime 'net.openhft:koloboke-impl-jdk8:0.6.7'
    testCompile 'org.mockito:mockito-core:2.0.2-beta'
    testCompile 'org.testng:testng:6.9.4'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
        resources {
            srcDir 'test/resources'
        }
    }
}

test.doFirst {
    useTestNG()
}

wrapper.gradleVersion = '2.4'

@SuppressWarnings("GroovyAssignabilityCheck")
CreateStartScripts buildStartScript(String appName, String mainClass) {
    return buildStartScript(appName, mainClass, []);
}

@SuppressWarnings("GroovyAssignabilityCheck")
CreateStartScripts buildStartScript(String appName, String mainClass, Iterable<String> jvmOpts) {
    task "${appName}StartScript"(type: CreateStartScripts) {
        mainClassName = mainClass
        applicationName = appName
        defaultJvmOpts = jvmOpts
        outputDir = new File(project.buildDir, 'scripts');
        classpath = jar.outputs.files + project.configurations.runtime
        group = "scripts"
    }
}

task addAllStartSctipts(dependsOn: jar) {
    group = "scripts"
    def cpmrJVM = []
    def detectJVM = []
    buildStartScript("cpmr", "edu.cwru.cbc.ASM.CPMR.CPMR_Pgm", cpmrJVM).execute()
    buildStartScript("detect", "edu.cwru.cbc.ASM.detect.DetectionPgm", detectJVM).execute()
    buildStartScript("convert", "edu.cwru.cbc.ASM.tools.conversion.FormatConversionPgm").execute()
    buildStartScript("intersect", "edu.cwru.cbc.ASM.tools.IntersectRegionsPgm").execute()
    buildStartScript("simulate", "edu.cwru.cbc.ASM.tools.simulation.SimulationPgm").execute()
    buildStartScript("visualize", "edu.cwru.cbc.ASM.tools.ReadsVisualizationPgm").execute()
    buildStartScript("bedMerge", "edu.cwru.cbc.ASM.tools.MergeBedRegion").execute()
    buildStartScript("parseResult", "edu.cwru.cbc.ASM.tools.ParseResult").execute()
}

distributions {
    //noinspection GroovyAssignabilityCheck
    main {
        contents {
            addAllStartSctipts
            into('bin') {
                from 'build/scripts'
            }
            into('lib') {
                from 'build/libs'
                from configurations.runtime
            }

            exclude "**/*.bat"
        }
    }
}

remotes {
    lab {
        host = 'lancelothk.case.edu'
        user = 'kehu'
        identity = file('/home/lancelothk/.ssh/id_rsa')
    }
    ngs {
        host = 'ngs.case.edu'
        user = 'ke'
        identity = file('/home/lancelothk/.ssh/id_rsa')
    }
    osc {
        host = 'oakley.osc.edu'
        user = 'cwr0411'
        identity = file('/home/lancelothk/.ssh/id_rsa')
    }
}

task updateBin(dependsOn: installDist) {
    group = 'update'
    doLast {
        def userName = System.getProperty('user.name')
        if (userName == "kehu") {
            copy {
                from 'build/install/ASM/bin'
                into '/home/kehu/experiments/ASM/bin'
            }
            copy {
                from 'build/libs/ASM.jar'
                into '/home/kehu/experiments/ASM/lib'
            }
        } else if (userName == "lancelothk") {
            def curRemote;
            if ("$remote".toString() == "ngs") {
                curRemote = remotes.ngs;
                println "use ngs as remote"
            } else if ("$remote".toString() == "lab") {
                curRemote = remotes.lab;
                println "use lab as remote"
            } else if ("$remote".toString() == "osc") {
                curRemote = remotes.osc;
                println "use osc as remote"
            } else {
                println "invalid remote name!"
            }
            ssh.run {
                session(curRemote) {
                    put from: buildDir.toString() + '/install/ASM/bin', into: 'experiments/ASM'
                    put from: buildDir.toString() + '/libs/ASM.jar', into: 'experiments/ASM/lib'
                }
            }
        }
    }
}


task updateAll(dependsOn: installDist) {
    group = 'update'
    doLast {
        def userName = System.getProperty('user.name')
        if (userName == "kehu") {
            copy {
                from 'build/install/ASM/bin'
                into '/home/kehu/experiments/ASM/bin'
            }
            copy {
                from 'build/install/ASM/lib'
                into '/home/kehu/experiments/ASM/lib'
            }
        } else if (userName == "lancelothk") {
            def curRemote;
            if ("$remote".toString() == "ngs") {
                curRemote = remotes.ngs;
                println "use ngs as remote"
            } else if ("$remote".toString() == "lab") {
                curRemote = remotes.lab;
                println "use lab as remote"
            } else if ("$remote".toString() == "osc") {
                curRemote = remotes.osc;
                println "use osc as remote"
            } else {
                println "invalid remote name!"
            }
            ssh.run {
                session(curRemote) {
                    put from: buildDir.toString() + '/install/ASM/bin', into: 'experiments/ASM'
                    put from: buildDir.toString() + '/install/ASM/lib', into: 'experiments/ASM'
                }
            }
        }
    }
}

installDist.dependsOn build